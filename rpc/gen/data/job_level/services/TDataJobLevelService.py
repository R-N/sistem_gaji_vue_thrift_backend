#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=rpc.gen.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def fetch(self, auth_token, query):
        """
        Parameters:
         - auth_token
         - query

        """
        pass

    def get(self, auth_token, job_level_id):
        """
        Parameters:
         - auth_token
         - job_level_id

        """
        pass

    def create(self, auth_token, form):
        """
        Parameters:
         - auth_token
         - form

        """
        pass

    def set_enabled(self, auth_token, job_level_id, enabled):
        """
        Parameters:
         - auth_token
         - job_level_id
         - enabled

        """
        pass

    def set_name(self, auth_token, job_level_id, name):
        """
        Parameters:
         - auth_token
         - job_level_id
         - name

        """
        pass

    def set_gaji_pokok(self, auth_token, job_level_id, gaji_pokok):
        """
        Parameters:
         - auth_token
         - job_level_id
         - gaji_pokok

        """
        pass

    def set_tunjangan_jabatan(self, auth_token, job_level_id, tunjangan_jabatan):
        """
        Parameters:
         - auth_token
         - job_level_id
         - tunjangan_jabatan

        """
        pass

    def set_upah_lembur_1(self, auth_token, job_level_id, upah_lembur_1):
        """
        Parameters:
         - auth_token
         - job_level_id
         - upah_lembur_1

        """
        pass

    def set_upah_lembur_2(self, auth_token, job_level_id, upah_lembur_2):
        """
        Parameters:
         - auth_token
         - job_level_id
         - upah_lembur_2

        """
        pass

    def set_upah_lembur_3(self, auth_token, job_level_id, upah_lembur_3):
        """
        Parameters:
         - auth_token
         - job_level_id
         - upah_lembur_3

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def fetch(self, auth_token, query):
        """
        Parameters:
         - auth_token
         - query

        """
        self.send_fetch(auth_token, query)
        return self.recv_fetch()

    def send_fetch(self, auth_token, query):
        self._oprot.writeMessageBegin('fetch', TMessageType.CALL, self._seqid)
        args = fetch_args()
        args.auth_token = auth_token
        args.query = query
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetch failed: unknown result")

    def get(self, auth_token, job_level_id):
        """
        Parameters:
         - auth_token
         - job_level_id

        """
        self.send_get(auth_token, job_level_id)
        return self.recv_get()

    def send_get(self, auth_token, job_level_id):
        self._oprot.writeMessageBegin('get', TMessageType.CALL, self._seqid)
        args = get_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get failed: unknown result")

    def create(self, auth_token, form):
        """
        Parameters:
         - auth_token
         - form

        """
        self.send_create(auth_token, form)
        return self.recv_create()

    def send_create(self, auth_token, form):
        self._oprot.writeMessageBegin('create', TMessageType.CALL, self._seqid)
        args = create_args()
        args.auth_token = auth_token
        args.form = form
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        if result.jobLevel_error is not None:
            raise result.jobLevel_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create failed: unknown result")

    def set_enabled(self, auth_token, job_level_id, enabled):
        """
        Parameters:
         - auth_token
         - job_level_id
         - enabled

        """
        self.send_set_enabled(auth_token, job_level_id, enabled)
        self.recv_set_enabled()

    def send_set_enabled(self, auth_token, job_level_id, enabled):
        self._oprot.writeMessageBegin('set_enabled', TMessageType.CALL, self._seqid)
        args = set_enabled_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.enabled = enabled
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_enabled(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_enabled_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        return

    def set_name(self, auth_token, job_level_id, name):
        """
        Parameters:
         - auth_token
         - job_level_id
         - name

        """
        self.send_set_name(auth_token, job_level_id, name)
        self.recv_set_name()

    def send_set_name(self, auth_token, job_level_id, name):
        self._oprot.writeMessageBegin('set_name', TMessageType.CALL, self._seqid)
        args = set_name_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_name(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_name_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        return

    def set_gaji_pokok(self, auth_token, job_level_id, gaji_pokok):
        """
        Parameters:
         - auth_token
         - job_level_id
         - gaji_pokok

        """
        self.send_set_gaji_pokok(auth_token, job_level_id, gaji_pokok)
        self.recv_set_gaji_pokok()

    def send_set_gaji_pokok(self, auth_token, job_level_id, gaji_pokok):
        self._oprot.writeMessageBegin('set_gaji_pokok', TMessageType.CALL, self._seqid)
        args = set_gaji_pokok_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.gaji_pokok = gaji_pokok
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_gaji_pokok(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_gaji_pokok_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        return

    def set_tunjangan_jabatan(self, auth_token, job_level_id, tunjangan_jabatan):
        """
        Parameters:
         - auth_token
         - job_level_id
         - tunjangan_jabatan

        """
        self.send_set_tunjangan_jabatan(auth_token, job_level_id, tunjangan_jabatan)
        self.recv_set_tunjangan_jabatan()

    def send_set_tunjangan_jabatan(self, auth_token, job_level_id, tunjangan_jabatan):
        self._oprot.writeMessageBegin('set_tunjangan_jabatan', TMessageType.CALL, self._seqid)
        args = set_tunjangan_jabatan_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.tunjangan_jabatan = tunjangan_jabatan
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_tunjangan_jabatan(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_tunjangan_jabatan_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        return

    def set_upah_lembur_1(self, auth_token, job_level_id, upah_lembur_1):
        """
        Parameters:
         - auth_token
         - job_level_id
         - upah_lembur_1

        """
        self.send_set_upah_lembur_1(auth_token, job_level_id, upah_lembur_1)
        self.recv_set_upah_lembur_1()

    def send_set_upah_lembur_1(self, auth_token, job_level_id, upah_lembur_1):
        self._oprot.writeMessageBegin('set_upah_lembur_1', TMessageType.CALL, self._seqid)
        args = set_upah_lembur_1_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.upah_lembur_1 = upah_lembur_1
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_upah_lembur_1(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_upah_lembur_1_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        return

    def set_upah_lembur_2(self, auth_token, job_level_id, upah_lembur_2):
        """
        Parameters:
         - auth_token
         - job_level_id
         - upah_lembur_2

        """
        self.send_set_upah_lembur_2(auth_token, job_level_id, upah_lembur_2)
        self.recv_set_upah_lembur_2()

    def send_set_upah_lembur_2(self, auth_token, job_level_id, upah_lembur_2):
        self._oprot.writeMessageBegin('set_upah_lembur_2', TMessageType.CALL, self._seqid)
        args = set_upah_lembur_2_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.upah_lembur_2 = upah_lembur_2
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_upah_lembur_2(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_upah_lembur_2_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        return

    def set_upah_lembur_3(self, auth_token, job_level_id, upah_lembur_3):
        """
        Parameters:
         - auth_token
         - job_level_id
         - upah_lembur_3

        """
        self.send_set_upah_lembur_3(auth_token, job_level_id, upah_lembur_3)
        self.recv_set_upah_lembur_3()

    def send_set_upah_lembur_3(self, auth_token, job_level_id, upah_lembur_3):
        self._oprot.writeMessageBegin('set_upah_lembur_3', TMessageType.CALL, self._seqid)
        args = set_upah_lembur_3_args()
        args.auth_token = auth_token
        args.job_level_id = job_level_id
        args.upah_lembur_3 = upah_lembur_3
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_upah_lembur_3(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_upah_lembur_3_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.job_level_error is not None:
            raise result.job_level_error
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["fetch"] = Processor.process_fetch
        self._processMap["get"] = Processor.process_get
        self._processMap["create"] = Processor.process_create
        self._processMap["set_enabled"] = Processor.process_set_enabled
        self._processMap["set_name"] = Processor.process_set_name
        self._processMap["set_gaji_pokok"] = Processor.process_set_gaji_pokok
        self._processMap["set_tunjangan_jabatan"] = Processor.process_set_tunjangan_jabatan
        self._processMap["set_upah_lembur_1"] = Processor.process_set_upah_lembur_1
        self._processMap["set_upah_lembur_2"] = Processor.process_set_upah_lembur_2
        self._processMap["set_upah_lembur_3"] = Processor.process_set_upah_lembur_3
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_fetch(self, seqid, iprot, oprot):
        args = fetch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fetch_result()
        try:
            result.success = self._handler.fetch(args.auth_token, args.query)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fetch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get(self, seqid, iprot, oprot):
        args = get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_result()
        try:
            result.success = self._handler.get(args.auth_token, args.job_level_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create(self, seqid, iprot, oprot):
        args = create_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_result()
        try:
            result.success = self._handler.create(args.auth_token, args.form)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as jobLevel_error:
            msg_type = TMessageType.REPLY
            result.jobLevel_error = jobLevel_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_enabled(self, seqid, iprot, oprot):
        args = set_enabled_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_enabled_result()
        try:
            self._handler.set_enabled(args.auth_token, args.job_level_id, args.enabled)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_enabled", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_name(self, seqid, iprot, oprot):
        args = set_name_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_name_result()
        try:
            self._handler.set_name(args.auth_token, args.job_level_id, args.name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_name", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_gaji_pokok(self, seqid, iprot, oprot):
        args = set_gaji_pokok_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_gaji_pokok_result()
        try:
            self._handler.set_gaji_pokok(args.auth_token, args.job_level_id, args.gaji_pokok)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_gaji_pokok", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_tunjangan_jabatan(self, seqid, iprot, oprot):
        args = set_tunjangan_jabatan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_tunjangan_jabatan_result()
        try:
            self._handler.set_tunjangan_jabatan(args.auth_token, args.job_level_id, args.tunjangan_jabatan)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_tunjangan_jabatan", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_upah_lembur_1(self, seqid, iprot, oprot):
        args = set_upah_lembur_1_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_upah_lembur_1_result()
        try:
            self._handler.set_upah_lembur_1(args.auth_token, args.job_level_id, args.upah_lembur_1)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_upah_lembur_1", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_upah_lembur_2(self, seqid, iprot, oprot):
        args = set_upah_lembur_2_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_upah_lembur_2_result()
        try:
            self._handler.set_upah_lembur_2(args.auth_token, args.job_level_id, args.upah_lembur_2)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_upah_lembur_2", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_upah_lembur_3(self, seqid, iprot, oprot):
        args = set_upah_lembur_3_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_upah_lembur_3_result()
        try:
            self._handler.set_upah_lembur_3(args.auth_token, args.job_level_id, args.upah_lembur_3)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.data.job_level.errors.ttypes.TJobLevelError as job_level_error:
            msg_type = TMessageType.REPLY
            result.job_level_error = job_level_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_upah_lembur_3", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class fetch_args(object):
    """
    Attributes:
     - auth_token
     - query

    """


    def __init__(self, auth_token=None, query=None,):
        self.auth_token = auth_token
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.query = rpc.gen.data.job_level.structs.ttypes.TJobLevelQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 2)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_args)
fetch_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'query', [rpc.gen.data.job_level.structs.ttypes.TJobLevelQuery, None], None, ),  # 2
)


class fetch_result(object):
    """
    Attributes:
     - success
     - auth_error

    """


    def __init__(self, success=None, auth_error=None,):
        self.success = success
        self.auth_error = auth_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = rpc.gen.data.job_level.structs.ttypes.TJobLevel()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_result)
fetch_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [rpc.gen.data.job_level.structs.ttypes.TJobLevel, None], False), None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
)


class get_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id

    """


    def __init__(self, auth_token=None, job_level_id=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_args)
get_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
)


class get_result(object):
    """
    Attributes:
     - success
     - auth_error
     - job_level_error

    """


    def __init__(self, success=None, auth_error=None, job_level_error=None,):
        self.success = success
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rpc.gen.data.job_level.structs.ttypes.TJobLevel()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_result)
get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rpc.gen.data.job_level.structs.ttypes.TJobLevel, None], None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class create_args(object):
    """
    Attributes:
     - auth_token
     - form

    """


    def __init__(self, auth_token=None, form=None,):
        self.auth_token = auth_token
        self.form = form

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.form = rpc.gen.data.job_level.structs.ttypes.TJobLevelForm()
                    self.form.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.form is not None:
            oprot.writeFieldBegin('form', TType.STRUCT, 2)
            self.form.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_args)
create_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'form', [rpc.gen.data.job_level.structs.ttypes.TJobLevelForm, None], None, ),  # 2
)


class create_result(object):
    """
    Attributes:
     - success
     - auth_error
     - jobLevel_error

    """


    def __init__(self, success=None, auth_error=None, jobLevel_error=None,):
        self.success = success
        self.auth_error = auth_error
        self.jobLevel_error = jobLevel_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rpc.gen.data.job_level.structs.ttypes.TJobLevel()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.jobLevel_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.jobLevel_error is not None:
            oprot.writeFieldBegin('jobLevel_error', TType.STRUCT, 2)
            self.jobLevel_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_result)
create_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rpc.gen.data.job_level.structs.ttypes.TJobLevel, None], None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'jobLevel_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class set_enabled_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id
     - enabled

    """


    def __init__(self, auth_token=None, job_level_id=None, enabled=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id
        self.enabled = enabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_enabled_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 3)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_enabled_args)
set_enabled_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
    (3, TType.BOOL, 'enabled', None, None, ),  # 3
)


class set_enabled_result(object):
    """
    Attributes:
     - auth_error
     - job_level_error

    """


    def __init__(self, auth_error=None, job_level_error=None,):
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_enabled_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_enabled_result)
set_enabled_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class set_name_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id
     - name

    """


    def __init__(self, auth_token=None, job_level_id=None, name=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_name_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_name_args)
set_name_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
)


class set_name_result(object):
    """
    Attributes:
     - auth_error
     - job_level_error

    """


    def __init__(self, auth_error=None, job_level_error=None,):
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_name_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_name_result)
set_name_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class set_gaji_pokok_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id
     - gaji_pokok

    """


    def __init__(self, auth_token=None, job_level_id=None, gaji_pokok=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id
        self.gaji_pokok = gaji_pokok

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.gaji_pokok = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_gaji_pokok_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        if self.gaji_pokok is not None:
            oprot.writeFieldBegin('gaji_pokok', TType.STRING, 3)
            oprot.writeString(self.gaji_pokok.encode('utf-8') if sys.version_info[0] == 2 else self.gaji_pokok)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_gaji_pokok_args)
set_gaji_pokok_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
    (3, TType.STRING, 'gaji_pokok', 'UTF8', None, ),  # 3
)


class set_gaji_pokok_result(object):
    """
    Attributes:
     - auth_error
     - job_level_error

    """


    def __init__(self, auth_error=None, job_level_error=None,):
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_gaji_pokok_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_gaji_pokok_result)
set_gaji_pokok_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class set_tunjangan_jabatan_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id
     - tunjangan_jabatan

    """


    def __init__(self, auth_token=None, job_level_id=None, tunjangan_jabatan=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id
        self.tunjangan_jabatan = tunjangan_jabatan

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tunjangan_jabatan = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_tunjangan_jabatan_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        if self.tunjangan_jabatan is not None:
            oprot.writeFieldBegin('tunjangan_jabatan', TType.STRING, 3)
            oprot.writeString(self.tunjangan_jabatan.encode('utf-8') if sys.version_info[0] == 2 else self.tunjangan_jabatan)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_tunjangan_jabatan_args)
set_tunjangan_jabatan_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
    (3, TType.STRING, 'tunjangan_jabatan', 'UTF8', None, ),  # 3
)


class set_tunjangan_jabatan_result(object):
    """
    Attributes:
     - auth_error
     - job_level_error

    """


    def __init__(self, auth_error=None, job_level_error=None,):
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_tunjangan_jabatan_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_tunjangan_jabatan_result)
set_tunjangan_jabatan_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class set_upah_lembur_1_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id
     - upah_lembur_1

    """


    def __init__(self, auth_token=None, job_level_id=None, upah_lembur_1=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id
        self.upah_lembur_1 = upah_lembur_1

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.upah_lembur_1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_upah_lembur_1_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        if self.upah_lembur_1 is not None:
            oprot.writeFieldBegin('upah_lembur_1', TType.STRING, 3)
            oprot.writeString(self.upah_lembur_1.encode('utf-8') if sys.version_info[0] == 2 else self.upah_lembur_1)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_upah_lembur_1_args)
set_upah_lembur_1_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
    (3, TType.STRING, 'upah_lembur_1', 'UTF8', None, ),  # 3
)


class set_upah_lembur_1_result(object):
    """
    Attributes:
     - auth_error
     - job_level_error

    """


    def __init__(self, auth_error=None, job_level_error=None,):
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_upah_lembur_1_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_upah_lembur_1_result)
set_upah_lembur_1_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class set_upah_lembur_2_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id
     - upah_lembur_2

    """


    def __init__(self, auth_token=None, job_level_id=None, upah_lembur_2=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id
        self.upah_lembur_2 = upah_lembur_2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.upah_lembur_2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_upah_lembur_2_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        if self.upah_lembur_2 is not None:
            oprot.writeFieldBegin('upah_lembur_2', TType.STRING, 3)
            oprot.writeString(self.upah_lembur_2.encode('utf-8') if sys.version_info[0] == 2 else self.upah_lembur_2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_upah_lembur_2_args)
set_upah_lembur_2_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
    (3, TType.STRING, 'upah_lembur_2', 'UTF8', None, ),  # 3
)


class set_upah_lembur_2_result(object):
    """
    Attributes:
     - auth_error
     - job_level_error

    """


    def __init__(self, auth_error=None, job_level_error=None,):
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_upah_lembur_2_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_upah_lembur_2_result)
set_upah_lembur_2_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)


class set_upah_lembur_3_args(object):
    """
    Attributes:
     - auth_token
     - job_level_id
     - upah_lembur_3

    """


    def __init__(self, auth_token=None, job_level_id=None, upah_lembur_3=None,):
        self.auth_token = auth_token
        self.job_level_id = job_level_id
        self.upah_lembur_3 = upah_lembur_3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.job_level_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.upah_lembur_3 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_upah_lembur_3_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.job_level_id is not None:
            oprot.writeFieldBegin('job_level_id', TType.I32, 2)
            oprot.writeI32(self.job_level_id)
            oprot.writeFieldEnd()
        if self.upah_lembur_3 is not None:
            oprot.writeFieldBegin('upah_lembur_3', TType.STRING, 3)
            oprot.writeString(self.upah_lembur_3.encode('utf-8') if sys.version_info[0] == 2 else self.upah_lembur_3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_upah_lembur_3_args)
set_upah_lembur_3_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'job_level_id', None, None, ),  # 2
    (3, TType.STRING, 'upah_lembur_3', 'UTF8', None, ),  # 3
)


class set_upah_lembur_3_result(object):
    """
    Attributes:
     - auth_error
     - job_level_error

    """


    def __init__(self, auth_error=None, job_level_error=None,):
        self.auth_error = auth_error
        self.job_level_error = job_level_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.job_level_error = rpc.gen.data.job_level.errors.ttypes.TJobLevelError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_upah_lembur_3_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.job_level_error is not None:
            oprot.writeFieldBegin('job_level_error', TType.STRUCT, 2)
            self.job_level_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_upah_lembur_3_result)
set_upah_lembur_3_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'job_level_error', [rpc.gen.data.job_level.errors.ttypes.TJobLevelError, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
