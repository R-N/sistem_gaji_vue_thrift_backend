#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=rpc.gen.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def fetch_backups(self, auth_token):
        """
        Parameters:
         - auth_token

        """
        pass

    def create_backup(self, auth_token, name):
        """
        Parameters:
         - auth_token
         - name

        """
        pass

    def delete_backup(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        pass

    def get_download_token(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        pass

    def get_upload_token(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        pass

    def restore_backup(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def fetch_backups(self, auth_token):
        """
        Parameters:
         - auth_token

        """
        self.send_fetch_backups(auth_token)
        return self.recv_fetch_backups()

    def send_fetch_backups(self, auth_token):
        self._oprot.writeMessageBegin('fetch_backups', TMessageType.CALL, self._seqid)
        args = fetch_backups_args()
        args.auth_token = auth_token
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetch_backups(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetch_backups_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetch_backups failed: unknown result")

    def create_backup(self, auth_token, name):
        """
        Parameters:
         - auth_token
         - name

        """
        self.send_create_backup(auth_token, name)
        return self.recv_create_backup()

    def send_create_backup(self, auth_token, name):
        self._oprot.writeMessageBegin('create_backup', TMessageType.CALL, self._seqid)
        args = create_backup_args()
        args.auth_token = auth_token
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_backup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_backup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        if result.file_error is not None:
            raise result.file_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_backup failed: unknown result")

    def delete_backup(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        self.send_delete_backup(auth_token, file_name)
        self.recv_delete_backup()

    def send_delete_backup(self, auth_token, file_name):
        self._oprot.writeMessageBegin('delete_backup', TMessageType.CALL, self._seqid)
        args = delete_backup_args()
        args.auth_token = auth_token
        args.file_name = file_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_backup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_backup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.file_error is not None:
            raise result.file_error
        return

    def get_download_token(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        self.send_get_download_token(auth_token, file_name)
        return self.recv_get_download_token()

    def send_get_download_token(self, auth_token, file_name):
        self._oprot.writeMessageBegin('get_download_token', TMessageType.CALL, self._seqid)
        args = get_download_token_args()
        args.auth_token = auth_token
        args.file_name = file_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_download_token(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_download_token_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        if result.file_error is not None:
            raise result.file_error
        if result.download_error is not None:
            raise result.download_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_download_token failed: unknown result")

    def get_upload_token(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        self.send_get_upload_token(auth_token, file_name)
        return self.recv_get_upload_token()

    def send_get_upload_token(self, auth_token, file_name):
        self._oprot.writeMessageBegin('get_upload_token', TMessageType.CALL, self._seqid)
        args = get_upload_token_args()
        args.auth_token = auth_token
        args.file_name = file_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_upload_token(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_upload_token_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        if result.file_error is not None:
            raise result.file_error
        if result.upload_error is not None:
            raise result.upload_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_upload_token failed: unknown result")

    def restore_backup(self, auth_token, file_name):
        """
        Parameters:
         - auth_token
         - file_name

        """
        self.send_restore_backup(auth_token, file_name)
        self.recv_restore_backup()

    def send_restore_backup(self, auth_token, file_name):
        self._oprot.writeMessageBegin('restore_backup', TMessageType.CALL, self._seqid)
        args = restore_backup_args()
        args.auth_token = auth_token
        args.file_name = file_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_restore_backup(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = restore_backup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.file_error is not None:
            raise result.file_error
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["fetch_backups"] = Processor.process_fetch_backups
        self._processMap["create_backup"] = Processor.process_create_backup
        self._processMap["delete_backup"] = Processor.process_delete_backup
        self._processMap["get_download_token"] = Processor.process_get_download_token
        self._processMap["get_upload_token"] = Processor.process_get_upload_token
        self._processMap["restore_backup"] = Processor.process_restore_backup
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_fetch_backups(self, seqid, iprot, oprot):
        args = fetch_backups_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fetch_backups_result()
        try:
            result.success = self._handler.fetch_backups(args.auth_token)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fetch_backups", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_backup(self, seqid, iprot, oprot):
        args = create_backup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_backup_result()
        try:
            result.success = self._handler.create_backup(args.auth_token, args.name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.file.file.errors.ttypes.TFileError as file_error:
            msg_type = TMessageType.REPLY
            result.file_error = file_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_backup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_backup(self, seqid, iprot, oprot):
        args = delete_backup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_backup_result()
        try:
            self._handler.delete_backup(args.auth_token, args.file_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.file.file.errors.ttypes.TFileError as file_error:
            msg_type = TMessageType.REPLY
            result.file_error = file_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_backup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_download_token(self, seqid, iprot, oprot):
        args = get_download_token_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_download_token_result()
        try:
            result.success = self._handler.get_download_token(args.auth_token, args.file_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.file.file.errors.ttypes.TFileError as file_error:
            msg_type = TMessageType.REPLY
            result.file_error = file_error
        except rpc.gen.file.download.errors.ttypes.TDownloadError as download_error:
            msg_type = TMessageType.REPLY
            result.download_error = download_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_download_token", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_upload_token(self, seqid, iprot, oprot):
        args = get_upload_token_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_upload_token_result()
        try:
            result.success = self._handler.get_upload_token(args.auth_token, args.file_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.file.file.errors.ttypes.TFileError as file_error:
            msg_type = TMessageType.REPLY
            result.file_error = file_error
        except rpc.gen.file.upload.errors.ttypes.TUploadError as upload_error:
            msg_type = TMessageType.REPLY
            result.upload_error = upload_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_upload_token", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_restore_backup(self, seqid, iprot, oprot):
        args = restore_backup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = restore_backup_result()
        try:
            self._handler.restore_backup(args.auth_token, args.file_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.file.file.errors.ttypes.TFileError as file_error:
            msg_type = TMessageType.REPLY
            result.file_error = file_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("restore_backup", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class fetch_backups_args(object):
    """
    Attributes:
     - auth_token

    """


    def __init__(self, auth_token=None,):
        self.auth_token = auth_token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_backups_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_backups_args)
fetch_backups_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
)


class fetch_backups_result(object):
    """
    Attributes:
     - success
     - auth_error

    """


    def __init__(self, success=None, auth_error=None,):
        self.success = success
        self.auth_error = auth_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = rpc.gen.system.backup.structs.ttypes.TBackupFile()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_backups_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_backups_result)
fetch_backups_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [rpc.gen.system.backup.structs.ttypes.TBackupFile, None], False), None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
)


class create_backup_args(object):
    """
    Attributes:
     - auth_token
     - name

    """


    def __init__(self, auth_token=None, name=None,):
        self.auth_token = auth_token
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_backup_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_backup_args)
create_backup_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)


class create_backup_result(object):
    """
    Attributes:
     - success
     - auth_error
     - file_error

    """


    def __init__(self, success=None, auth_error=None, file_error=None,):
        self.success = success
        self.auth_error = auth_error
        self.file_error = file_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rpc.gen.system.backup.structs.ttypes.TBackupFile()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.file_error = rpc.gen.file.file.errors.ttypes.TFileError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_backup_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.file_error is not None:
            oprot.writeFieldBegin('file_error', TType.STRUCT, 2)
            self.file_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_backup_result)
create_backup_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rpc.gen.system.backup.structs.ttypes.TBackupFile, None], None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'file_error', [rpc.gen.file.file.errors.ttypes.TFileError, None], None, ),  # 2
)


class delete_backup_args(object):
    """
    Attributes:
     - auth_token
     - file_name

    """


    def __init__(self, auth_token=None, file_name=None,):
        self.auth_token = auth_token
        self.file_name = file_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_backup_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 2)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_backup_args)
delete_backup_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'file_name', 'UTF8', None, ),  # 2
)


class delete_backup_result(object):
    """
    Attributes:
     - auth_error
     - file_error

    """


    def __init__(self, auth_error=None, file_error=None,):
        self.auth_error = auth_error
        self.file_error = file_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.file_error = rpc.gen.file.file.errors.ttypes.TFileError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_backup_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.file_error is not None:
            oprot.writeFieldBegin('file_error', TType.STRUCT, 2)
            self.file_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_backup_result)
delete_backup_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'file_error', [rpc.gen.file.file.errors.ttypes.TFileError, None], None, ),  # 2
)


class get_download_token_args(object):
    """
    Attributes:
     - auth_token
     - file_name

    """


    def __init__(self, auth_token=None, file_name=None,):
        self.auth_token = auth_token
        self.file_name = file_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_download_token_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 2)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_download_token_args)
get_download_token_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'file_name', 'UTF8', None, ),  # 2
)


class get_download_token_result(object):
    """
    Attributes:
     - success
     - auth_error
     - file_error
     - download_error

    """


    def __init__(self, success=None, auth_error=None, file_error=None, download_error=None,):
        self.success = success
        self.auth_error = auth_error
        self.file_error = file_error
        self.download_error = download_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.file_error = rpc.gen.file.file.errors.ttypes.TFileError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.download_error = rpc.gen.file.download.errors.ttypes.TDownloadError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_download_token_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.file_error is not None:
            oprot.writeFieldBegin('file_error', TType.STRUCT, 2)
            self.file_error.write(oprot)
            oprot.writeFieldEnd()
        if self.download_error is not None:
            oprot.writeFieldBegin('download_error', TType.STRUCT, 3)
            self.download_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_download_token_result)
get_download_token_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'file_error', [rpc.gen.file.file.errors.ttypes.TFileError, None], None, ),  # 2
    (3, TType.STRUCT, 'download_error', [rpc.gen.file.download.errors.ttypes.TDownloadError, None], None, ),  # 3
)


class get_upload_token_args(object):
    """
    Attributes:
     - auth_token
     - file_name

    """


    def __init__(self, auth_token=None, file_name=None,):
        self.auth_token = auth_token
        self.file_name = file_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_upload_token_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 2)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_upload_token_args)
get_upload_token_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'file_name', 'UTF8', None, ),  # 2
)


class get_upload_token_result(object):
    """
    Attributes:
     - success
     - auth_error
     - file_error
     - upload_error

    """


    def __init__(self, success=None, auth_error=None, file_error=None, upload_error=None,):
        self.success = success
        self.auth_error = auth_error
        self.file_error = file_error
        self.upload_error = upload_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.file_error = rpc.gen.file.file.errors.ttypes.TFileError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.upload_error = rpc.gen.file.upload.errors.ttypes.TUploadError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_upload_token_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.file_error is not None:
            oprot.writeFieldBegin('file_error', TType.STRUCT, 2)
            self.file_error.write(oprot)
            oprot.writeFieldEnd()
        if self.upload_error is not None:
            oprot.writeFieldBegin('upload_error', TType.STRUCT, 3)
            self.upload_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_upload_token_result)
get_upload_token_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'file_error', [rpc.gen.file.file.errors.ttypes.TFileError, None], None, ),  # 2
    (3, TType.STRUCT, 'upload_error', [rpc.gen.file.upload.errors.ttypes.TUploadError, None], None, ),  # 3
)


class restore_backup_args(object):
    """
    Attributes:
     - auth_token
     - file_name

    """


    def __init__(self, auth_token=None, file_name=None,):
        self.auth_token = auth_token
        self.file_name = file_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('restore_backup_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 2)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(restore_backup_args)
restore_backup_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'file_name', 'UTF8', None, ),  # 2
)


class restore_backup_result(object):
    """
    Attributes:
     - auth_error
     - file_error

    """


    def __init__(self, auth_error=None, file_error=None,):
        self.auth_error = auth_error
        self.file_error = file_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.file_error = rpc.gen.file.file.errors.ttypes.TFileError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('restore_backup_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.file_error is not None:
            oprot.writeFieldBegin('file_error', TType.STRUCT, 2)
            self.file_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(restore_backup_result)
restore_backup_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'file_error', [rpc.gen.file.file.errors.ttypes.TFileError, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
