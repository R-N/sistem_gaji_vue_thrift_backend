#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=rpc.gen.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def get_user(self, auth_token):
        """
        Parameters:
         - auth_token

        """
        pass

    def change_email(self, auth_token, new_email):
        """
        Parameters:
         - auth_token
         - new_email

        """
        pass

    def set_password(self, auth_token, old_password, new_password):
        """
        Parameters:
         - auth_token
         - old_password
         - new_password

        """
        pass

    def set_name(self, auth_token, new_name):
        """
        Parameters:
         - auth_token
         - new_name

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def get_user(self, auth_token):
        """
        Parameters:
         - auth_token

        """
        self.send_get_user(auth_token)
        return self.recv_get_user()

    def send_get_user(self, auth_token):
        self._oprot.writeMessageBegin('get_user', TMessageType.CALL, self._seqid)
        args = get_user_args()
        args.auth_token = auth_token
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_user(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_user_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_user failed: unknown result")

    def change_email(self, auth_token, new_email):
        """
        Parameters:
         - auth_token
         - new_email

        """
        self.send_change_email(auth_token, new_email)
        self.recv_change_email()

    def send_change_email(self, auth_token, new_email):
        self._oprot.writeMessageBegin('change_email', TMessageType.CALL, self._seqid)
        args = change_email_args()
        args.auth_token = auth_token
        args.new_email = new_email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_change_email(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = change_email_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.email_error is not None:
            raise result.email_error
        if result.user_email_error is not None:
            raise result.user_email_error
        return

    def set_password(self, auth_token, old_password, new_password):
        """
        Parameters:
         - auth_token
         - old_password
         - new_password

        """
        self.send_set_password(auth_token, old_password, new_password)
        return self.recv_set_password()

    def send_set_password(self, auth_token, old_password, new_password):
        self._oprot.writeMessageBegin('set_password', TMessageType.CALL, self._seqid)
        args = set_password_args()
        args.auth_token = auth_token
        args.old_password = old_password
        args.new_password = new_password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_password(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_password_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        if result.login_error is not None:
            raise result.login_error
        if result.user_error is not None:
            raise result.user_error
        if result.email_error is not None:
            raise result.email_error
        if result.user_email_error is not None:
            raise result.user_email_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "set_password failed: unknown result")

    def set_name(self, auth_token, new_name):
        """
        Parameters:
         - auth_token
         - new_name

        """
        self.send_set_name(auth_token, new_name)
        self.recv_set_name()

    def send_set_name(self, auth_token, new_name):
        self._oprot.writeMessageBegin('set_name', TMessageType.CALL, self._seqid)
        args = set_name_args()
        args.auth_token = auth_token
        args.new_name = new_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_name(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_name_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["get_user"] = Processor.process_get_user
        self._processMap["change_email"] = Processor.process_change_email
        self._processMap["set_password"] = Processor.process_set_password
        self._processMap["set_name"] = Processor.process_set_name
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_get_user(self, seqid, iprot, oprot):
        args = get_user_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_user_result()
        try:
            result.success = self._handler.get_user(args.auth_token)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_user", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_change_email(self, seqid, iprot, oprot):
        args = change_email_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = change_email_result()
        try:
            self._handler.change_email(args.auth_token, args.new_email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.email.errors.ttypes.TEmailError as email_error:
            msg_type = TMessageType.REPLY
            result.email_error = email_error
        except rpc.gen.user.email.errors.ttypes.TUserEmailError as user_email_error:
            msg_type = TMessageType.REPLY
            result.user_email_error = user_email_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("change_email", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_password(self, seqid, iprot, oprot):
        args = set_password_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_password_result()
        try:
            result.success = self._handler.set_password(args.auth_token, args.old_password, args.new_password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.auth.errors.ttypes.TLoginError as login_error:
            msg_type = TMessageType.REPLY
            result.login_error = login_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.email.errors.ttypes.TEmailError as email_error:
            msg_type = TMessageType.REPLY
            result.email_error = email_error
        except rpc.gen.user.email.errors.ttypes.TUserEmailError as user_email_error:
            msg_type = TMessageType.REPLY
            result.user_email_error = user_email_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_password", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_name(self, seqid, iprot, oprot):
        args = set_name_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_name_result()
        try:
            self._handler.set_name(args.auth_token, args.new_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_name", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class get_user_args(object):
    """
    Attributes:
     - auth_token

    """


    def __init__(self, auth_token=None,):
        self.auth_token = auth_token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_user_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_user_args)
get_user_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
)


class get_user_result(object):
    """
    Attributes:
     - success
     - auth_error

    """


    def __init__(self, success=None, auth_error=None,):
        self.success = success
        self.auth_error = auth_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rpc.gen.user.user.structs.ttypes.TUser()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_user_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_user_result)
get_user_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rpc.gen.user.user.structs.ttypes.TUser, None], None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
)


class change_email_args(object):
    """
    Attributes:
     - auth_token
     - new_email

    """


    def __init__(self, auth_token=None, new_email=None,):
        self.auth_token = auth_token
        self.new_email = new_email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.new_email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('change_email_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.new_email is not None:
            oprot.writeFieldBegin('new_email', TType.STRING, 2)
            oprot.writeString(self.new_email.encode('utf-8') if sys.version_info[0] == 2 else self.new_email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(change_email_args)
change_email_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'new_email', 'UTF8', None, ),  # 2
)


class change_email_result(object):
    """
    Attributes:
     - auth_error
     - user_error
     - email_error
     - user_email_error

    """


    def __init__(self, auth_error=None, user_error=None, email_error=None, user_email_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error
        self.email_error = email_error
        self.user_email_error = user_email_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.email_error = rpc.gen.email.errors.ttypes.TEmailError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.user_email_error = rpc.gen.user.email.errors.ttypes.TUserEmailError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('change_email_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.email_error is not None:
            oprot.writeFieldBegin('email_error', TType.STRUCT, 3)
            self.email_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_email_error is not None:
            oprot.writeFieldBegin('user_email_error', TType.STRUCT, 4)
            self.user_email_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(change_email_result)
change_email_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'email_error', [rpc.gen.email.errors.ttypes.TEmailError, None], None, ),  # 3
    (4, TType.STRUCT, 'user_email_error', [rpc.gen.user.email.errors.ttypes.TUserEmailError, None], None, ),  # 4
)


class set_password_args(object):
    """
    Attributes:
     - auth_token
     - old_password
     - new_password

    """


    def __init__(self, auth_token=None, old_password=None, new_password=None,):
        self.auth_token = auth_token
        self.old_password = old_password
        self.new_password = new_password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.old_password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.new_password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_password_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.old_password is not None:
            oprot.writeFieldBegin('old_password', TType.STRING, 2)
            oprot.writeString(self.old_password.encode('utf-8') if sys.version_info[0] == 2 else self.old_password)
            oprot.writeFieldEnd()
        if self.new_password is not None:
            oprot.writeFieldBegin('new_password', TType.STRING, 3)
            oprot.writeString(self.new_password.encode('utf-8') if sys.version_info[0] == 2 else self.new_password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_password_args)
set_password_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'old_password', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'new_password', 'UTF8', None, ),  # 3
)


class set_password_result(object):
    """
    Attributes:
     - success
     - auth_error
     - login_error
     - user_error
     - email_error
     - user_email_error

    """


    def __init__(self, success=None, auth_error=None, login_error=None, user_error=None, email_error=None, user_email_error=None,):
        self.success = success
        self.auth_error = auth_error
        self.login_error = login_error
        self.user_error = user_error
        self.email_error = email_error
        self.user_email_error = user_email_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rpc.gen.user.auth.structs.ttypes.TLoginResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.login_error = rpc.gen.user.auth.errors.ttypes.TLoginError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.email_error = rpc.gen.email.errors.ttypes.TEmailError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.user_email_error = rpc.gen.user.email.errors.ttypes.TUserEmailError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_password_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.login_error is not None:
            oprot.writeFieldBegin('login_error', TType.STRUCT, 2)
            self.login_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 3)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.email_error is not None:
            oprot.writeFieldBegin('email_error', TType.STRUCT, 4)
            self.email_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_email_error is not None:
            oprot.writeFieldBegin('user_email_error', TType.STRUCT, 5)
            self.user_email_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_password_result)
set_password_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rpc.gen.user.auth.structs.ttypes.TLoginResult, None], None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'login_error', [rpc.gen.user.auth.errors.ttypes.TLoginError, None], None, ),  # 2
    (3, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 3
    (4, TType.STRUCT, 'email_error', [rpc.gen.email.errors.ttypes.TEmailError, None], None, ),  # 4
    (5, TType.STRUCT, 'user_email_error', [rpc.gen.user.email.errors.ttypes.TUserEmailError, None], None, ),  # 5
)


class set_name_args(object):
    """
    Attributes:
     - auth_token
     - new_name

    """


    def __init__(self, auth_token=None, new_name=None,):
        self.auth_token = auth_token
        self.new_name = new_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.new_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_name_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.new_name is not None:
            oprot.writeFieldBegin('new_name', TType.STRING, 2)
            oprot.writeString(self.new_name.encode('utf-8') if sys.version_info[0] == 2 else self.new_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_name_args)
set_name_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'new_name', 'UTF8', None, ),  # 2
)


class set_name_result(object):
    """
    Attributes:
     - auth_error
     - user_error

    """


    def __init__(self, auth_error=None, user_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_name_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_name_result)
set_name_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
