#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=rpc.gen.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def fetch(self, auth_token, query):
        """
        Parameters:
         - auth_token
         - query

        """
        pass

    def create(self, auth_token, form):
        """
        Parameters:
         - auth_token
         - form

        """
        pass

    def set_role(self, auth_token, user_id, new_role):
        """
        Parameters:
         - auth_token
         - user_id
         - new_role

        """
        pass

    def set_email(self, auth_token, user_id, new_email):
        """
        Parameters:
         - auth_token
         - user_id
         - new_email

        """
        pass

    def set_password(self, auth_token, user_id, new_password):
        """
        Parameters:
         - auth_token
         - user_id
         - new_password

        """
        pass

    def set_enabled(self, auth_token, user_id, new_enabled):
        """
        Parameters:
         - auth_token
         - user_id
         - new_enabled

        """
        pass

    def set_verified(self, auth_token, user_id, new_verified):
        """
        Parameters:
         - auth_token
         - user_id
         - new_verified

        """
        pass

    def delete(self, auth_token, user_id):
        """
        Parameters:
         - auth_token
         - user_id

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def fetch(self, auth_token, query):
        """
        Parameters:
         - auth_token
         - query

        """
        self.send_fetch(auth_token, query)
        return self.recv_fetch()

    def send_fetch(self, auth_token, query):
        self._oprot.writeMessageBegin('fetch', TMessageType.CALL, self._seqid)
        args = fetch_args()
        args.auth_token = auth_token
        args.query = query
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fetch failed: unknown result")

    def create(self, auth_token, form):
        """
        Parameters:
         - auth_token
         - form

        """
        self.send_create(auth_token, form)
        return self.recv_create()

    def send_create(self, auth_token, form):
        self._oprot.writeMessageBegin('create', TMessageType.CALL, self._seqid)
        args = create_args()
        args.auth_token = auth_token
        args.form = form
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.email_error is not None:
            raise result.email_error
        if result.user_email_error is not None:
            raise result.user_email_error
        if result.user_management_error is not None:
            raise result.user_management_error
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create failed: unknown result")

    def set_role(self, auth_token, user_id, new_role):
        """
        Parameters:
         - auth_token
         - user_id
         - new_role

        """
        self.send_set_role(auth_token, user_id, new_role)
        self.recv_set_role()

    def send_set_role(self, auth_token, user_id, new_role):
        self._oprot.writeMessageBegin('set_role', TMessageType.CALL, self._seqid)
        args = set_role_args()
        args.auth_token = auth_token
        args.user_id = user_id
        args.new_role = new_role
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_role(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_role_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.user_management_error is not None:
            raise result.user_management_error
        return

    def set_email(self, auth_token, user_id, new_email):
        """
        Parameters:
         - auth_token
         - user_id
         - new_email

        """
        self.send_set_email(auth_token, user_id, new_email)
        self.recv_set_email()

    def send_set_email(self, auth_token, user_id, new_email):
        self._oprot.writeMessageBegin('set_email', TMessageType.CALL, self._seqid)
        args = set_email_args()
        args.auth_token = auth_token
        args.user_id = user_id
        args.new_email = new_email
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_email(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_email_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.user_management_error is not None:
            raise result.user_management_error
        return

    def set_password(self, auth_token, user_id, new_password):
        """
        Parameters:
         - auth_token
         - user_id
         - new_password

        """
        self.send_set_password(auth_token, user_id, new_password)
        self.recv_set_password()

    def send_set_password(self, auth_token, user_id, new_password):
        self._oprot.writeMessageBegin('set_password', TMessageType.CALL, self._seqid)
        args = set_password_args()
        args.auth_token = auth_token
        args.user_id = user_id
        args.new_password = new_password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_password(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_password_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.user_management_error is not None:
            raise result.user_management_error
        return

    def set_enabled(self, auth_token, user_id, new_enabled):
        """
        Parameters:
         - auth_token
         - user_id
         - new_enabled

        """
        self.send_set_enabled(auth_token, user_id, new_enabled)
        self.recv_set_enabled()

    def send_set_enabled(self, auth_token, user_id, new_enabled):
        self._oprot.writeMessageBegin('set_enabled', TMessageType.CALL, self._seqid)
        args = set_enabled_args()
        args.auth_token = auth_token
        args.user_id = user_id
        args.new_enabled = new_enabled
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_enabled(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_enabled_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.user_management_error is not None:
            raise result.user_management_error
        return

    def set_verified(self, auth_token, user_id, new_verified):
        """
        Parameters:
         - auth_token
         - user_id
         - new_verified

        """
        self.send_set_verified(auth_token, user_id, new_verified)
        self.recv_set_verified()

    def send_set_verified(self, auth_token, user_id, new_verified):
        self._oprot.writeMessageBegin('set_verified', TMessageType.CALL, self._seqid)
        args = set_verified_args()
        args.auth_token = auth_token
        args.user_id = user_id
        args.new_verified = new_verified
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_verified(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_verified_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.user_management_error is not None:
            raise result.user_management_error
        return

    def delete(self, auth_token, user_id):
        """
        Parameters:
         - auth_token
         - user_id

        """
        self.send_delete(auth_token, user_id)
        self.recv_delete()

    def send_delete(self, auth_token, user_id):
        self._oprot.writeMessageBegin('delete', TMessageType.CALL, self._seqid)
        args = delete_args()
        args.auth_token = auth_token
        args.user_id = user_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.auth_error is not None:
            raise result.auth_error
        if result.user_error is not None:
            raise result.user_error
        if result.user_management_error is not None:
            raise result.user_management_error
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["fetch"] = Processor.process_fetch
        self._processMap["create"] = Processor.process_create
        self._processMap["set_role"] = Processor.process_set_role
        self._processMap["set_email"] = Processor.process_set_email
        self._processMap["set_password"] = Processor.process_set_password
        self._processMap["set_enabled"] = Processor.process_set_enabled
        self._processMap["set_verified"] = Processor.process_set_verified
        self._processMap["delete"] = Processor.process_delete
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_fetch(self, seqid, iprot, oprot):
        args = fetch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fetch_result()
        try:
            result.success = self._handler.fetch(args.auth_token, args.query)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fetch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create(self, seqid, iprot, oprot):
        args = create_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_result()
        try:
            result.success = self._handler.create(args.auth_token, args.form)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.email.errors.ttypes.TEmailError as email_error:
            msg_type = TMessageType.REPLY
            result.email_error = email_error
        except rpc.gen.user.email.errors.ttypes.TUserEmailError as user_email_error:
            msg_type = TMessageType.REPLY
            result.user_email_error = user_email_error
        except rpc.gen.user.management.errors.ttypes.TUserManagementError as user_management_error:
            msg_type = TMessageType.REPLY
            result.user_management_error = user_management_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_role(self, seqid, iprot, oprot):
        args = set_role_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_role_result()
        try:
            self._handler.set_role(args.auth_token, args.user_id, args.new_role)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.user.management.errors.ttypes.TUserManagementError as user_management_error:
            msg_type = TMessageType.REPLY
            result.user_management_error = user_management_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_role", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_email(self, seqid, iprot, oprot):
        args = set_email_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_email_result()
        try:
            self._handler.set_email(args.auth_token, args.user_id, args.new_email)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.user.management.errors.ttypes.TUserManagementError as user_management_error:
            msg_type = TMessageType.REPLY
            result.user_management_error = user_management_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_email", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_password(self, seqid, iprot, oprot):
        args = set_password_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_password_result()
        try:
            self._handler.set_password(args.auth_token, args.user_id, args.new_password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.user.management.errors.ttypes.TUserManagementError as user_management_error:
            msg_type = TMessageType.REPLY
            result.user_management_error = user_management_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_password", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_enabled(self, seqid, iprot, oprot):
        args = set_enabled_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_enabled_result()
        try:
            self._handler.set_enabled(args.auth_token, args.user_id, args.new_enabled)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.user.management.errors.ttypes.TUserManagementError as user_management_error:
            msg_type = TMessageType.REPLY
            result.user_management_error = user_management_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_enabled", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_verified(self, seqid, iprot, oprot):
        args = set_verified_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_verified_result()
        try:
            self._handler.set_verified(args.auth_token, args.user_id, args.new_verified)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.user.management.errors.ttypes.TUserManagementError as user_management_error:
            msg_type = TMessageType.REPLY
            result.user_management_error = user_management_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_verified", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete(self, seqid, iprot, oprot):
        args = delete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_result()
        try:
            self._handler.delete(args.auth_token, args.user_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except rpc.gen.user.auth.errors.ttypes.TAuthError as auth_error:
            msg_type = TMessageType.REPLY
            result.auth_error = auth_error
        except rpc.gen.user.user.errors.ttypes.TUserError as user_error:
            msg_type = TMessageType.REPLY
            result.user_error = user_error
        except rpc.gen.user.management.errors.ttypes.TUserManagementError as user_management_error:
            msg_type = TMessageType.REPLY
            result.user_management_error = user_management_error
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class fetch_args(object):
    """
    Attributes:
     - auth_token
     - query

    """


    def __init__(self, auth_token=None, query=None,):
        self.auth_token = auth_token
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.query = rpc.gen.user.management.structs.ttypes.TUserQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 2)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_args)
fetch_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'query', [rpc.gen.user.management.structs.ttypes.TUserQuery, None], None, ),  # 2
)


class fetch_result(object):
    """
    Attributes:
     - success
     - auth_error

    """


    def __init__(self, success=None, auth_error=None,):
        self.success = success
        self.auth_error = auth_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = rpc.gen.user.user.structs.ttypes.TUser()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_result)
fetch_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [rpc.gen.user.user.structs.ttypes.TUser, None], False), None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
)


class create_args(object):
    """
    Attributes:
     - auth_token
     - form

    """


    def __init__(self, auth_token=None, form=None,):
        self.auth_token = auth_token
        self.form = form

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.form = rpc.gen.user.management.structs.ttypes.TUserRegistrationForm()
                    self.form.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.form is not None:
            oprot.writeFieldBegin('form', TType.STRUCT, 2)
            self.form.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_args)
create_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'form', [rpc.gen.user.management.structs.ttypes.TUserRegistrationForm, None], None, ),  # 2
)


class create_result(object):
    """
    Attributes:
     - success
     - auth_error
     - user_error
     - email_error
     - user_email_error
     - user_management_error

    """


    def __init__(self, success=None, auth_error=None, user_error=None, email_error=None, user_email_error=None, user_management_error=None,):
        self.success = success
        self.auth_error = auth_error
        self.user_error = user_error
        self.email_error = email_error
        self.user_email_error = user_email_error
        self.user_management_error = user_management_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rpc.gen.user.user.structs.ttypes.TUser()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.email_error = rpc.gen.email.errors.ttypes.TEmailError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.user_email_error = rpc.gen.user.email.errors.ttypes.TUserEmailError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.user_management_error = rpc.gen.user.management.errors.ttypes.TUserManagementError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.email_error is not None:
            oprot.writeFieldBegin('email_error', TType.STRUCT, 3)
            self.email_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_email_error is not None:
            oprot.writeFieldBegin('user_email_error', TType.STRUCT, 4)
            self.user_email_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_management_error is not None:
            oprot.writeFieldBegin('user_management_error', TType.STRUCT, 5)
            self.user_management_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_result)
create_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rpc.gen.user.user.structs.ttypes.TUser, None], None, ),  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'email_error', [rpc.gen.email.errors.ttypes.TEmailError, None], None, ),  # 3
    (4, TType.STRUCT, 'user_email_error', [rpc.gen.user.email.errors.ttypes.TUserEmailError, None], None, ),  # 4
    (5, TType.STRUCT, 'user_management_error', [rpc.gen.user.management.errors.ttypes.TUserManagementError, None], None, ),  # 5
)


class set_role_args(object):
    """
    Attributes:
     - auth_token
     - user_id
     - new_role

    """


    def __init__(self, auth_token=None, user_id=None, new_role=None,):
        self.auth_token = auth_token
        self.user_id = user_id
        self.new_role = new_role

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.new_role = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_role_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 2)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.new_role is not None:
            oprot.writeFieldBegin('new_role', TType.I32, 3)
            oprot.writeI32(self.new_role)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_role_args)
set_role_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user_id', None, None, ),  # 2
    (3, TType.I32, 'new_role', None, None, ),  # 3
)


class set_role_result(object):
    """
    Attributes:
     - auth_error
     - user_error
     - user_management_error

    """


    def __init__(self, auth_error=None, user_error=None, user_management_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error
        self.user_management_error = user_management_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.user_management_error = rpc.gen.user.management.errors.ttypes.TUserManagementError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_role_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_management_error is not None:
            oprot.writeFieldBegin('user_management_error', TType.STRUCT, 3)
            self.user_management_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_role_result)
set_role_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'user_management_error', [rpc.gen.user.management.errors.ttypes.TUserManagementError, None], None, ),  # 3
)


class set_email_args(object):
    """
    Attributes:
     - auth_token
     - user_id
     - new_email

    """


    def __init__(self, auth_token=None, user_id=None, new_email=None,):
        self.auth_token = auth_token
        self.user_id = user_id
        self.new_email = new_email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.new_email = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_email_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 2)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.new_email is not None:
            oprot.writeFieldBegin('new_email', TType.STRING, 3)
            oprot.writeString(self.new_email.encode('utf-8') if sys.version_info[0] == 2 else self.new_email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_email_args)
set_email_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user_id', None, None, ),  # 2
    (3, TType.STRING, 'new_email', 'UTF8', None, ),  # 3
)


class set_email_result(object):
    """
    Attributes:
     - auth_error
     - user_error
     - user_management_error

    """


    def __init__(self, auth_error=None, user_error=None, user_management_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error
        self.user_management_error = user_management_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.user_management_error = rpc.gen.user.management.errors.ttypes.TUserManagementError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_email_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_management_error is not None:
            oprot.writeFieldBegin('user_management_error', TType.STRUCT, 3)
            self.user_management_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_email_result)
set_email_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'user_management_error', [rpc.gen.user.management.errors.ttypes.TUserManagementError, None], None, ),  # 3
)


class set_password_args(object):
    """
    Attributes:
     - auth_token
     - user_id
     - new_password

    """


    def __init__(self, auth_token=None, user_id=None, new_password=None,):
        self.auth_token = auth_token
        self.user_id = user_id
        self.new_password = new_password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.new_password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_password_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 2)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.new_password is not None:
            oprot.writeFieldBegin('new_password', TType.STRING, 3)
            oprot.writeString(self.new_password.encode('utf-8') if sys.version_info[0] == 2 else self.new_password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_password_args)
set_password_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user_id', None, None, ),  # 2
    (3, TType.STRING, 'new_password', 'UTF8', None, ),  # 3
)


class set_password_result(object):
    """
    Attributes:
     - auth_error
     - user_error
     - user_management_error

    """


    def __init__(self, auth_error=None, user_error=None, user_management_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error
        self.user_management_error = user_management_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.user_management_error = rpc.gen.user.management.errors.ttypes.TUserManagementError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_password_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_management_error is not None:
            oprot.writeFieldBegin('user_management_error', TType.STRUCT, 3)
            self.user_management_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_password_result)
set_password_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'user_management_error', [rpc.gen.user.management.errors.ttypes.TUserManagementError, None], None, ),  # 3
)


class set_enabled_args(object):
    """
    Attributes:
     - auth_token
     - user_id
     - new_enabled

    """


    def __init__(self, auth_token=None, user_id=None, new_enabled=None,):
        self.auth_token = auth_token
        self.user_id = user_id
        self.new_enabled = new_enabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.new_enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_enabled_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 2)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.new_enabled is not None:
            oprot.writeFieldBegin('new_enabled', TType.BOOL, 3)
            oprot.writeBool(self.new_enabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_enabled_args)
set_enabled_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user_id', None, None, ),  # 2
    (3, TType.BOOL, 'new_enabled', None, None, ),  # 3
)


class set_enabled_result(object):
    """
    Attributes:
     - auth_error
     - user_error
     - user_management_error

    """


    def __init__(self, auth_error=None, user_error=None, user_management_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error
        self.user_management_error = user_management_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.user_management_error = rpc.gen.user.management.errors.ttypes.TUserManagementError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_enabled_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_management_error is not None:
            oprot.writeFieldBegin('user_management_error', TType.STRUCT, 3)
            self.user_management_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_enabled_result)
set_enabled_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'user_management_error', [rpc.gen.user.management.errors.ttypes.TUserManagementError, None], None, ),  # 3
)


class set_verified_args(object):
    """
    Attributes:
     - auth_token
     - user_id
     - new_verified

    """


    def __init__(self, auth_token=None, user_id=None, new_verified=None,):
        self.auth_token = auth_token
        self.user_id = user_id
        self.new_verified = new_verified

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.new_verified = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_verified_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 2)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.new_verified is not None:
            oprot.writeFieldBegin('new_verified', TType.BOOL, 3)
            oprot.writeBool(self.new_verified)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_verified_args)
set_verified_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user_id', None, None, ),  # 2
    (3, TType.BOOL, 'new_verified', None, None, ),  # 3
)


class set_verified_result(object):
    """
    Attributes:
     - auth_error
     - user_error
     - user_management_error

    """


    def __init__(self, auth_error=None, user_error=None, user_management_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error
        self.user_management_error = user_management_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.user_management_error = rpc.gen.user.management.errors.ttypes.TUserManagementError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_verified_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_management_error is not None:
            oprot.writeFieldBegin('user_management_error', TType.STRUCT, 3)
            self.user_management_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_verified_result)
set_verified_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'user_management_error', [rpc.gen.user.management.errors.ttypes.TUserManagementError, None], None, ),  # 3
)


class delete_args(object):
    """
    Attributes:
     - auth_token
     - user_id

    """


    def __init__(self, auth_token=None, user_id=None,):
        self.auth_token = auth_token
        self.user_id = user_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.auth_token = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_args')
        if self.auth_token is not None:
            oprot.writeFieldBegin('auth_token', TType.STRING, 1)
            oprot.writeString(self.auth_token.encode('utf-8') if sys.version_info[0] == 2 else self.auth_token)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 2)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_args)
delete_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'auth_token', 'UTF8', None, ),  # 1
    (2, TType.I32, 'user_id', None, None, ),  # 2
)


class delete_result(object):
    """
    Attributes:
     - auth_error
     - user_error
     - user_management_error

    """


    def __init__(self, auth_error=None, user_error=None, user_management_error=None,):
        self.auth_error = auth_error
        self.user_error = user_error
        self.user_management_error = user_management_error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.auth_error = rpc.gen.user.auth.errors.ttypes.TAuthError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.user_error = rpc.gen.user.user.errors.ttypes.TUserError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.user_management_error = rpc.gen.user.management.errors.ttypes.TUserManagementError.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_result')
        if self.auth_error is not None:
            oprot.writeFieldBegin('auth_error', TType.STRUCT, 1)
            self.auth_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_error is not None:
            oprot.writeFieldBegin('user_error', TType.STRUCT, 2)
            self.user_error.write(oprot)
            oprot.writeFieldEnd()
        if self.user_management_error is not None:
            oprot.writeFieldBegin('user_management_error', TType.STRUCT, 3)
            self.user_management_error.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_result)
delete_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'auth_error', [rpc.gen.user.auth.errors.ttypes.TAuthError, None], None, ),  # 1
    (2, TType.STRUCT, 'user_error', [rpc.gen.user.user.errors.ttypes.TUserError, None], None, ),  # 2
    (3, TType.STRUCT, 'user_management_error', [rpc.gen.user.management.errors.ttypes.TUserManagementError, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
